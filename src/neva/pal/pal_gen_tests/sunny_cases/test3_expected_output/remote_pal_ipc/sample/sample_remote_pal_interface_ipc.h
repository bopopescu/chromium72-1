// This file is generated by PAL generator, do not modify.
// To make changes, modify the source file:
// test3.json

#ifndef REMOTE_PAL_IPC_SAMPLE_SAMPLE_REMOTE_PAL_INTERFACE_IPC_H_
#define REMOTE_PAL_IPC_SAMPLE_SAMPLE_REMOTE_PAL_INTERFACE_IPC_H_

#include <map>

#include "pal/public/interfaces/sample_interface.h"
#include "remote_pal_ipc/sample/sample_remote_pal_observer.h"

namespace pal {

class SampleRemotePalInterfaceIPC : public SampleInterface {
 public:
  SampleRemotePalInterfaceIPC();
  ~SampleRemotePalInterfaceIPC() override;

  std::string GetValue() const override;
  void CallFunc(std::string arg1, std::string arg2) override;

  void ProcessData(
      std::string data,
      int32_t callback_index,
      const ProcessDataRespondCallback& on_process_data_done) override;
  void SubscribeToEvent() override;

  std::unique_ptr<SampleUpdateSubscription> AddCallback(
      const SampleUpdateCallback& callback) override;

 private:
  struct FrameCallbacks {
    FrameCallbacks();
    ~FrameCallbacks();

    SampleUpdateCallbackList sample_update_callbacks_;
  };

  content::RenderFrame* getFrame() const;

  friend content::SampleRemotePalObserver;

  void NotifyProcessData(int pal_async_callback_id,
                         int error_code,
                         const std::string& data);
  void NotifySampleUpdate(int frame_id, const std::string& value);

  using FrameCallbacksMAP = std::map<int, std::unique_ptr<FrameCallbacks>>;
  FrameCallbacksMAP callbacks_;

  using ProcessDataRespondCallbackMAP =
      std::map<int, ProcessDataRespondCallback>;
  ProcessDataRespondCallbackMAP process_data_respond_callbacks_;
  static int process_data_callback_id_;

  template <typename _ID, typename _Map>
  static _ID GetAsyncMsgId(_ID& async_msg_id_, _Map& map);
};

}  // namespace pal

#endif  // REMOTE_PAL_IPC_SAMPLE_SAMPLE_REMOTE_PAL_INTERFACE_IPC_H_
