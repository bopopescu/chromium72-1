// This file is generated by PAL generator, do not modify.
// To make changes, modify the source file:
// test3.json

#ifndef PAL_PUBLIC_INTERFACES_SAMPLE_INTERFACE_H_
#define PAL_PUBLIC_INTERFACES_SAMPLE_INTERFACE_H_

#include <memory>
#include "base/callback.h"
#include "base/callback_list.h"
#include "pal/ipc/pal_export.h"

namespace pal {
// The callback is called to notify client with recieved service response
using ProcessDataRespondCallback =
    base::Callback<void(int error_code, const std::string& data)>;

// This interface provides a framework which lets check
// all ways of data flow
//
// Introduced-by: Newa Framework team

class PAL_EXPORT SampleInterface {
 public:
  using SampleUpdateCallback = base::Callback<void(const std::string& value)>;

  using SampleUpdateCallbackList =
      base::CallbackList<void(const std::string& value)>;

  using SampleUpdateSubscription = SampleUpdateCallbackList::Subscription;

  virtual ~SampleInterface(){};

  // Returns current value. Value might be any (string, number, object, etc)
  // It's represent data's way: injection->page

  virtual std::string GetValue() const = 0;

  // It's represent data's way: page->injection->page

  virtual void CallFunc(std::string arg1,       //  Any value
                        std::string arg2) = 0;  //  Another any value

  // It's represent data's way: page->injection

  virtual void ProcessData(
      std::string data,                                //  Data of any type
      const ProcessDataRespondCallback& on_done) = 0;  // Callback to notify
                                                       // client with received
                                                       // service response

  // Combination with other SampleAPI's functions represents:
  // injection->page->injection

  virtual void SubscribeToEvent() = 0;

  virtual std::unique_ptr<SampleUpdateSubscription> AddCallback(
      const SampleUpdateCallback& callback) = 0;
};

}  // namespace pal

#endif  // PAL_PUBLIC_INTERFACES_SAMPLE_INTERFACE_H_