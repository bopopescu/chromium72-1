// This file is generated by PAL generator, do not modify.
// To make changes, modify the source file:
// test3.json

#ifndef PAL_PUBLIC_BROWSER_SAMPLE_HOST_H_
#define PAL_PUBLIC_BROWSER_SAMPLE_HOST_H_

#include <set>

#include "content/public/browser/browser_message_filter.h"
#include "pal/ipc/pal_export.h"
#include "pal/public/interfaces/sample_interface.h"

namespace pal {

class PAL_EXPORT SampleHost : public content::BrowserMessageFilter {
 public:
  SampleHost();

  bool OnMessageReceived(const IPC::Message& message) override;

 private:
  ~SampleHost() override;

  void OnCallFunc(int* routing_id, std::string arg1, std::string arg2);

  void OnProcessDataDone(int routing_id,
                         int pal_async_callback_id,
                         int32_t callback_index,
                         int error_code,
                         const std::string& data);

  void OnProcessData(int* routing_id,
                     int pal_async_callback_id,
                     std::string data,
                     int32_t callback_index);

  void OnSubscribeToEvent(int* routing_id);

  void SendSampleUpdate(const std::string& value);

  std::set<int> route_ids_;
  SampleInterface::SampleUpdateCallback mSampleUpdateCallback;
  std::unique_ptr<SampleInterface::SampleUpdateSubscription>
      mSampleUpdateSubscription;

  void AddCallbacks();

  base::WeakPtrFactory<SampleHost> weak_ptr_factory_;
  DISALLOW_COPY_AND_ASSIGN(SampleHost);
};

}  // namespace pal

#endif  // PAL_PUBLIC_BROWSER_SAMPLE_HOST_H_