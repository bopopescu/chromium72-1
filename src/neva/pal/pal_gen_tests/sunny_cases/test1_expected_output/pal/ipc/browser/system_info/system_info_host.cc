// This file is generated by PAL generator, do not modify.
// To make changes, modify the source file:
// test1.json

#include "pal/ipc/browser/system_info/system_info_host.h"

#include "base/bind.h"
#include "pal/ipc/system_info_messages.h"
#include "pal/public/pal.h"
#include "pal/public/pal_factory.h"

namespace pal {

SystemInfoHost::SystemInfoHost()
    : content::BrowserMessageFilter(SystemInfoMsgStart) {}

SystemInfoHost::~SystemInfoHost() {
  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
}

// clang-format off
bool SystemInfoHost::OnMessageReceived(const IPC::Message& message) {
  int routing_id = message.routing_id();
  bool handled = true;

  IPC_BEGIN_MESSAGE_MAP_WITH_PARAM(
      SystemInfoHost, message, &routing_id)
    IPC_MESSAGE_HANDLER(SystemInfoHostMsg_GetSSLCertPath, OnGetSSLCertPath)
    IPC_MESSAGE_UNHANDLED(handled = false)
  IPC_END_MESSAGE_MAP()
  return handled;
}
// clang-format on

void SystemInfoHost::OnGetSSLCertPath(std::string* pal_ret) {
  SystemInfoInterface* interface = pal::GetInstance()->GetSystemInfoInterface();

  if (interface != NULL) {
    *pal_ret = interface->GetSSLCertPath();
  } else {
    LOG(ERROR) << "Interface not available";
  }
}

}  // namespace pal